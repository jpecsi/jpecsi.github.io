<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Joe Pecsi</title>
        <description>A repository of technical rambling</description>
        <link>https://joepecsi.com/</link>
        <atom:link href="https://joepecsi.com/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 08 Aug 2024 20:38:06 -0400</pubDate>
        <lastBuildDate>Thu, 08 Aug 2024 20:38:06 -0400</lastBuildDate>
        <generator>Jekyll v4.3.3</generator>
        
            <item>
                <title>Friends in Security - Code Review and Testing for Fun!</title>
                <description>&lt;p&gt;In a professional setting, it’s important to separate teams of security professionals to avoid bias. Even for personal projects, I always like getting additional eyes on things to make sure I didn’t miss something.&lt;/p&gt;

&lt;p&gt;Full disclosure, I am not a software developer by any means. I know enough to hack around, and am pretty comfortable with scripting languages like Python. Most of my personal projects that require coding are based on Python. I do that mainly for the reduced time to prototype, some things like KegWatch I have plans to move to a different language for performance reasons.&lt;/p&gt;

&lt;p&gt;To maintain full transparency, I can admit that even as a security professional sometimes I miss things or make mistakes in my own code. The further I have progressed in my career, the more I have gotten away from constant hands on keyboard work and have instead focused on compliance, risk management, security architecture, and systems engineering. As someone who has never spent a lot of time doing red team security, it’s important to have friends that do.&lt;/p&gt;

&lt;h2 id=&quot;code-review&quot;&gt;Code Review&lt;/h2&gt;
&lt;p&gt;I have been investing a lot of time lately in my &lt;a href=&quot;https://joepecsi.com/projects/kegwatch&quot;&gt;KegWatch&lt;/a&gt; project. I have been focusing on the server side components while I wait for new hardware to arrive. This week I finished rewriting the API server (Python based of course, using Flask and Waitress) and wanted a proper security review done. One of my closest friends is also a cyber security professional, but on the other side and loves to poke and prod for vulnerabilities. I sent him a link to the repo and less than 24 hours later he’d identified 5 issues for me to look at. Two of the issues were just poor coding (uninitialized variable and a potential to index an empty list based on bad input), but three of them were XSS concerns.&lt;/p&gt;

&lt;h3 id=&quot;what-is-xss&quot;&gt;What is XSS?&lt;/h3&gt;
&lt;p&gt;Cross Site Scripting (XSS) is a vulnerability in web applications that allows an attacker to inject executable code into the web app. The motive of the attacker would be to steal cookies, session data, user redirection (to malicious sites), or even modifying/altering a website. The primary defense to this is proper input sanitization. You need to validate and clean all input before processing it to avoid accidentally executing malicious code.&lt;/p&gt;

&lt;div class=&quot;page__gallery__wrapper&quot;&gt;
  &lt;div class=&quot;page__gallery__images&quot;&gt;
    &lt;img src=&quot;/images/blog/2024/08/08/meme.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Proxmox Summary&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;The best way to learn is from mistakes, so I am happy to advertise what I did wrong and how I plan to fix it!&lt;/p&gt;

&lt;p&gt;Below is a snippet of code that enables XSS…&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Get data from the DELETE request
data = request.json


# Build the query
sql = &apos;DELETE FROM tbl_keg WHERE keg_id=%s&apos;
values = (data.get(&apos;keg_id&apos;),)

# Execute the query, make sure it worked...
if (db_query(sql,values,1)):
	log(1,&apos;Successfully deleted keg: &apos; + str(data.get(&apos;keg_id&apos;)))
	
	#### BAD CODE ####
	return (&apos;Deleted Keg: &apos; + data.get(&apos;keg_id&apos;))

else:
	log(0,&apos;No changes made to keg id: &apos; + str(data.get(&apos;keg_id&apos;)))

	#### BAD CODE #####
	return (&apos;No changes made to keg id: &apos; + data.get(&apos;keg_id&apos;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The issue with the code above, is in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; lines. By returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.get(&apos;keg_id&apos;)&lt;/code&gt; I am sending back the user’s input without any validation or sanitization. In testing, if you embed executable code within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; request, it will execute:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	&quot;keg_id&quot;:&quot;&amp;lt;script&amp;gt;alert(&apos;xss&apos;);&amp;lt;/script&amp;gt;&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;page__gallery__wrapper&quot;&gt;
  &lt;div class=&quot;page__gallery__images&quot;&gt;
    &lt;img src=&quot;/images/blog/2024/08/08/attack.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Proxmox Summary&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;As mentioned above, the best way to deal with this is to validate/sanitize user input. The other thing to do is not return the object directly provided by the user. Here is an example snippet of code for how I plan to validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keg_id&lt;/code&gt; (which is a UUID) and any fields set for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datetime&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def validate(dv,dt):
	# dv = data value | dt = data type
	if dt == &apos;uuid&apos;:
		try:
			uuid_obj = UUID(dv, version=4)
			return str(uuid_obj) == dv
		except Exception:
			return False
			
	elif dt == &apos;datetime&apos;:
		try:
			parse(dv)
			return True
		except Exception:
			return False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given the way I have architected the application, I thought it would be best to build a single function for validation which makes it easier to implement as the API endpoints expand/change. Here is the workflow:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Send the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; object from the HTTP request to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validator&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;Check the object for all known parameters and make sure they are the correct format&lt;/li&gt;
  &lt;li&gt;Flag any pieces of data that aren’t correct&lt;/li&gt;
  &lt;li&gt;After checking the object, if &lt;em&gt;anything&lt;/em&gt; failed return a boolean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;; if all data passes, return a sanitized dictionary with the parameters&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll be honest, building it out this way just made the most sense to me…but that doesn’t mean it’s correct. I’ll sleep a little better tonight though knowing that my sweet, precious beer data is secure.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Some of these mistakes were pretty obvious, and to that I say…I know. I figured there would be a few unsafe things in the code, which is exactly why I aked for a second set of eyes. I’ve spent several hours over the last few days writing everything out to get to a functional state. Now that it works, it’s time to clean up and implement some best practices like data validation/sanitization and proper error handling. You can check out the code on &lt;a href=&quot;https://github.com/jpecsi/kegwatch&quot;&gt;my GitHub&lt;/a&gt;. Right now only the server side code is uploaded, but over the next few weeks I hope to get everything wrapped up and pushed.&lt;/p&gt;
</description>
                <pubDate>Thu, 08 Aug 2024 00:00:00 -0400</pubDate>
                <link>https://joepecsi.com/blog/friends-in-security</link>
                <guid isPermaLink="true">https://joepecsi.com/blog/friends-in-security</guid>
                
                <category>security</category>
                
                <category>development</category>
                
                <category>kegwatch</category>
                
                
            </item>
        
            <item>
                <title>The Cyber Sandbox - Creating a Home Lab for Endless Exploration</title>
                <description>&lt;p&gt;When I was in college our professors always made it a point to warn us that our field was constantly changing and would require a lot of continuous learning. I remember feeling confident and had no worries at all because I could not imagine a world where I wasn’t in the know on the latest technologies. Back then I was constantly tinkering, reading, and building something that kept me involved in everything from software development to infrastructure.&lt;/p&gt;

&lt;p&gt;Fast forward 10 years and now I’ll hear developers or engineers talk about things I have never even heard of! Turns out as you get older it gets harder and harder to keep up on all of the cool new things if they aren’t directly related to your day job. The only thing in my way is me, so I decided to put some spare hardware to use and build out my home lab.&lt;/p&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;When I first got into home labs I was all about hardware, I wanted a rack with multiple servers churning away, and all the blinking lights. Now my goal is as much power in as small a package as possible, and I think I have achieved that with my current setup.&lt;/p&gt;

&lt;div class=&quot;page__gallery__wrapper&quot;&gt;
  &lt;div class=&quot;page__gallery__images&quot;&gt;
    &lt;img src=&quot;/images/blog/2024/07/09/proxmox.png&quot; loading=&quot;lazy&quot; alt=&quot;Proxmox Summary&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;specs&quot;&gt;Specs&lt;/h4&gt;
&lt;div class=&quot;table-container&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;&lt;th&gt;Hardware&lt;/th&gt;&lt;th&gt;Specification&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Motherboard&lt;/td&gt;&lt;td&gt;Supermicro X10SDV-8C-TLN4f+&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;&lt;td&gt;Intel Xeon D-1537 (8c/16t)&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;RAM&lt;/td&gt;&lt;td&gt;128 GB (ECC)&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Storage&lt;/td&gt;&lt;td&gt;1TB NVMe&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;OS&lt;/td&gt;&lt;td&gt;Proxmox VE 8.2.2&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This is the first time I will be diving deep into Proxmox as I used to be a die-hard VMware user. I started my career learning ESXi 5.X and deploying HA clusters with vCenter, distributed switching, etc. and I spent years learning everything I could about VMware’s hypervisor products (I even wanted to work for them some day); after the recent events with Broadcom though, I have definitely shifted away from that. Proxmox is also incredibly capable and feature rich for being free so I am excited to get more hands on time with it.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;I am treating this lab environment like any other system by thinking through goals and projects (requirements), design, and resource allocation. Even though I am the only one that will access it, I am also going to be thorough in my documentation. My home lab should be something that helps me improve my skills all around so I don’t want to get lazy or take shortcuts. I’ve started jotting down some initial plans and estimating resource allocation for the core services/design of the lab to get started.&lt;/p&gt;

&lt;div class=&quot;page__gallery__wrapper&quot;&gt;
  &lt;div class=&quot;page__gallery__images&quot;&gt;
    &lt;img src=&quot;/images/blog/2024/07/09/planning.png&quot; loading=&quot;lazy&quot; alt=&quot;Schematic&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I won’t hold myself to it or force myself through a change control process (I wanted to be thorough, not hate myself) because at the end of the day this is a lab and I anticipate things will constantly change and evolve. The foundation of the environment should remain relatively stable, however, to support the rest of the lab (authentication, DNS, etc.).&lt;/p&gt;

&lt;h2 id=&quot;projects-and-goals&quot;&gt;Projects and Goals&lt;/h2&gt;

&lt;div class=&quot;table-container&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;&lt;th&gt;Project&lt;/th&gt;&lt;th&gt;Why&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Deploy a SIEM&lt;/td&gt;&lt;td&gt;I’ve worked a little with SIEMs in the past, but I haven’t spent time deploying and configuring one so this is an important exercise&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Deploy k8s&lt;/td&gt;&lt;td&gt;Kubernetes is increasing in adoption and admittedly my knowledge of containerization stops at Docker. I am excited to dive deep into k8s&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Implement Ansible/Terraform&lt;/td&gt;&lt;td&gt;With the world moving into containerized workloads and cloud based environments, infrastructure as code plays a huge role in rapid deployment. I have no experience here and it’ll be valuable also from a security perspective to understand the threat landscape&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Implement Zero Trust&lt;/td&gt;&lt;td&gt;I understand it from a technical/architecture perspective, I have used it, but I have never designed and implemented it. This one is more for fun just to get hands on&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;NIST 800-171 Compliance&lt;/td&gt;&lt;td&gt;This one is a little crazy, I get that, especially because in most of my career roles this is what I invest a lot of time on. My goal here is to get as close to a perfect score on the 800-171 assessment as possible and build out templates to share for control tracking, SSPs, policies, etc.&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;As of now, the hardware is assembled in a nice little case, Proxmox has been installed, and I have done some basic initial setup. Next I need to deploy OPNsense and configure the virtual networks and then build out my domain controllers and configure Active Directory. I think my first project will be deploying Wazuh to get my SIEM/XDR up and running. I plan on making posts along the way so be sure to check back in!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
                <pubDate>Tue, 09 Jul 2024 00:00:00 -0400</pubDate>
                <link>https://joepecsi.com/blog/building-my-homelab</link>
                <guid isPermaLink="true">https://joepecsi.com/blog/building-my-homelab</guid>
                
                <category>homelab</category>
                
                
            </item>
        
    </channel>
</rss>